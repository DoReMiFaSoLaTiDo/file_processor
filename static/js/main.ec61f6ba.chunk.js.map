{"version":3,"sources":["components/uploader.js","App.js","serviceWorker.js","index.js"],"names":["CSVUploader","props","handleOnDrop","data","this","processData","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","updateDataState","bind","onDrop","onError","onRemoveFile","addRemoveButton","Component","App","deleteData","setState","sumTotal","undefined","processFile","dataSum","rowData","rowTotalCollector","row","parseInt","slice","push","reduce","sum","currentVal","total","currentValue","state","defaultState","isHidden","Container","fluid","textAlign","Message","hidden","positive","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAuCeA,E,kDAlCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAMPC,aAAe,SAASC,GACvBC,KAAKH,MAAMI,YAAYF,IARL,EAYnBG,cAAgB,SAASC,EAAKC,EAAMC,EAAWC,GAC9CC,QAAQC,IAAI,UAAWL,IAbL,EAgBnBM,mBAAqB,SAASV,GAC7BC,KAAKH,MAAMa,mBAdX,EAAKZ,aAAe,EAAKA,aAAaa,KAAlB,gBACpB,EAAKF,mBAAqB,EAAKA,mBAAmBE,KAAxB,gBAJR,E,qDAqBlB,OACC,kBAAC,IAAD,CACCC,OAAQZ,KAAKF,aACbe,QAASb,KAAKE,cACdY,aAAcd,KAAKS,mBACnBM,iBAAe,GAEf,wE,GA9BsBC,a,kBCoEXC,G,wDA1Cb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAQRqB,WAAa,WACX,EAAKC,SAAS,CAAEC,cAAUC,KAVT,EAanBC,YAAc,SAACvB,GACb,IAAIwB,EACAC,EAAU,GACVC,EAAoB,GAExB,IAAK,IAAIC,KAAO3B,EACQ,IAAlB4B,SAASD,KAEbF,EAAUzB,EAAK2B,GAAK3B,KAAK6B,MAAM,GAG/BH,EAAkBI,KAAML,EAAQM,QAAO,SAACC,EAAKC,GAIzC,OAHIA,IACFD,GAAYJ,SAASK,IAEhBD,IAER,KAGLR,EAAUE,EAAkBK,QAAO,SAACG,EAAOC,GACzC,OAAOD,EAAQC,KAGjB,EAAKf,SAAS,CAAEC,SAAUG,KAlC1B,EAAKY,MAAQ,EAAKC,eAClB,EAAKlB,WAAa,EAAKA,WAAWP,KAAhB,gBAClB,EAAKW,YAAc,EAAKA,YAAYX,KAAjB,gBALF,E,2DApBjB,MAAO,CACLS,cAAUC,K,+BAIJ,IACAD,EAAapB,KAAKmC,MAAlBf,SACFiB,GAAWjB,EAEjB,OACE,kBAACkB,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,UACzB,kBAAC,EAAD,CAAavC,YAAaD,KAAKsB,YAAaZ,gBAAiBV,KAAKkB,aAClE,kBAACuB,EAAA,EAAD,CAASC,OAAQL,EAAUM,UAAQ,GACjC,2BAAIvB,S,GAhBIJ,cCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.ec61f6ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { CSVReader } from 'react-papaparse';\n\nclass CSVUploader extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleOnDrop = this.handleOnDrop.bind(this);\n\t\tthis.handleOnRemoveFile = this.handleOnRemoveFile.bind(this);\n\t}\n\n\thandleOnDrop = function(data) {\n\t\tthis.props.processData(data);\n\t\t\n\t}\n\n\thandleOnError = function(err, file, inputElem, reason) {\n\t\tconsole.log('error: ', err);\n\t}\n\n\thandleOnRemoveFile = function(data) {\n\t\tthis.props.updateDataState();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<CSVReader\n\t\t\t\tonDrop={this.handleOnDrop}\n\t\t\t\tonError={this.handleOnError}\n\t\t\t\tonRemoveFile={this.handleOnRemoveFile}\n\t\t\t\taddRemoveButton\n\t\t\t>\n\t\t\t\t<span>Drop file here or Click to upload</span>\n\t\t\t</CSVReader>\n\t\t)\n\t}\n}\n\nexport default CSVUploader","import React, { Component } from 'react';\nimport CSVUploader from './components/uploader';\nimport { Container, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nclass App extends Component {\n\n  defaultState() {\n    return {\n      sumTotal: undefined\n    }\n  }\n\n  render() {\n    const { sumTotal } = this.state;\n    const isHidden = sumTotal ? false : true;\n\n    return (\n      <Container fluid textAlign='center'>\n        <CSVUploader processData={this.processFile} updateDataState={this.deleteData} />\n        <Message hidden={isHidden} positive>\n          <p>{sumTotal}</p>\n        </Message>  \n      </Container>\n    )\n    \n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.defaultState();\n    this.deleteData = this.deleteData.bind(this);\n    this.processFile = this.processFile.bind(this);\n\n  }\n\n  deleteData = () =>  {\n    this.setState({ sumTotal: undefined });\n  }\n\n  processFile = (data) => {\n    let dataSum = 0,\n        rowData = [],\n        rowTotalCollector = [];\n\n    for (var row in data) {\n      if (parseInt(row) === 0) continue; \n\n      rowData = data[row].data.slice(1); \n\n      \n      rowTotalCollector.push( rowData.reduce((sum, currentVal) => {\n          if (currentVal) {\n            sum = sum + parseInt(currentVal);\n          } \n          return sum;\n\n      }, 0) );\n    }\n\n    dataSum = rowTotalCollector.reduce((total, currentValue) => {\n      return total + currentValue;\n    });\n\n    this.setState({ sumTotal: dataSum });\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}